üìä Part 2: Data Dashboard Implementation

This document explains how to set up a data dashboard for the WMS project using either Airtable or the built-in local dashboard.

---

## Option 1: Airtable Dashboard (Recommended for Production)

‚úÖ Step-by-Step Instructions:

1. Go to Airtable using the invite link below:
   üîó https://airtable.com/invite/l?inviteId=invaevSA2u6Aqf2t3&inviteToken=8e9095e02cff4c853a0e3e253d81edbe4d920ff2db2d78bc7551310c84dbe15b

2. Log in or sign up to Airtable.

3. Create a new **Base** named:
   ‚û§ WMS - Sales Dashboard

4. Inside the base:
   ‚û§ Create a new table named **Sales**

5. Add the following columns (matching the output of Part 1):
   - Order ID
   - Date
   - Platform
   - SKU
   - MSKU
   - Quantity
   - Price
   - Channel
   - Region
   - Any other relevant columns

6. Enable **Grid view** and optionally add a **Chart extension**:
   ‚û§ Click "Extensions" > Add chart
   ‚û§ Configure bar, pie, or line charts to visualize sales by MSKU, Platform, Region, etc.

7. Get your **Airtable API Key**:
   ‚û§ Account > Developer Hub > Generate API Token

8. Get your **Base ID**:
   ‚û§ From Airtable's API documentation (https://airtable.com/api)

9. Add your `API_KEY` and `BASE_ID` to a `.env` file in your project root:


10. The web application will use these credentials to upload processed sales data automatically.

---

## Option 2: Built-in Local Dashboard (Fallback Solution)

If Airtable integration is not available or you prefer a self-contained solution, our application includes a built-in dashboard:

1. **How it works**:
- Processed data is stored locally as JSON files
- The Flask web application loads this data into an in-memory DuckDB database
- Interactive dashboard is rendered using Chart.js and Bootstrap

2. **Features**:
- Data Table View: Browse all processed records
- Charts View: Visualize data with interactive charts
- Logs View: Review processing logs
- AI Assistant: Ask questions about your data in natural language

3. **No setup required**:
- This option works out-of-the-box with no external dependencies
- All visualizations are generated client-side using JavaScript
- Data is stored locally in the `static/outputs` directory

---

üß† Implementation Details:

Our implementation supports both options:
1. If Airtable credentials are provided in the `.env` file, data will be synced to Airtable
2. If credentials are missing or invalid, the system automatically falls back to the local dashboard
3. The web interface includes an embedded view of either dashboard option

This dual approach ensures flexibility while maintaining all functionality regardless of external service availability.

---

üìå Notes:

- The local dashboard provides all essential functionality without external dependencies
- For larger datasets or multi-user scenarios, Airtable is recommended
- You can use Table.ai, Baserow, or NoCodeDB as alternatives to Airtable if preferred
- Make sure column names match exactly to avoid upload errors

---

üë®‚Äçüíª Created for CSTE WMS Automation Assignment